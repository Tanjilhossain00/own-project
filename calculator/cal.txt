class Calculator:
    def __init__(self):
        self.window=tk.Tk()
        self.window.title('Calculator')
        self.window.geometry("375x600")
        self.window.resizable(False,False)

        self.display_frame = self.create_display_frame()
        self.button_frame=self.create_button_frame()

        self.button_frame.rowconfigure(0, weight=1)



        for x in range(1,5):
            self.button_frame.rowconfigure(x,weight=1)
            self.button_frame.columnconfigure(x,weight=1)


        self.total_expression=''
        self.current_expression=''

        self.total_lable,self.lable=self.create_dispaly_label()
        self.digit={
            7:(1,1),8:(1,2),9:(1,3),
            4:(2,1),5:(2,2),6:(2,3),
            1:(3,1),2:(3,2),3:(3,3),
            0:(4,2),'.':(4,1)
        }
        self.operation={'/':"\u00F7",'*':'\u00D7','-':'-','+':'+'}
        self.create_digit_button()
        self.create_operator_button()
        self.create_special_button()
    def create_special_button(self):
        self.clear_button()
        self.equal_button()


    def create_display_frame(self):
        frame = tk.Frame(self.window, bg=light_grey, height=221)
        frame.pack(expand=True, fill='both')
        return frame

    def create_button_frame(self):
        frame = tk.Frame(self.window)
        frame.pack(expand=True, fill='both')
        return frame

    def create_dispaly_label(self):
        total_label=tk.Label(self.display_frame,text=self.total_expression,bg=light_grey,
                             fg=lable_colore,anchor=tk.E,padx=24,font=small_font_style)
        total_label.pack(expand=True,fill='both')

        label = tk.Label(self.display_frame, text=self.current_expression, bg=light_grey,
                               fg=lable_colore, anchor=tk.E, padx=24, font=large_font_style)
        label.pack(expand=True, fill='both')
        return total_label,label
    def add_to_expression(self,valu):
        self.current_expression+=str(valu)
        self.update_label()
    def append_operator(self,operator):
        self.current_expression+=operator
        self.total_expression+=self.current_expression
        self.update_total_label()
        self.current_expression=''
        self.update_label()

    def create_digit_button(self):
        for digit,row_valu in self.digit.items():
            button=tk.Button(self.button_frame,text=str(digit),bg='white',fg=lable_colore,
                             font=digit_font_style,borderwidth=0,
                             command=lambda x=digit:self.add_to_expression(x))
            button.grid(row=row_valu[0],column=row_valu[1],sticky=tk.NSEW)
    def create_operator_button(self):
        i=0
        for operator,symbol in self.operation.items():
            operator_button=tk.Button(self.button_frame,text=symbol,bg=off_white,fg=lable_colore,
            font=default_font_style,borderwidth=0,command=lambda x=operator:self.append_operator(x))
            operator_button.grid(row=i,column=4,sticky=tk.NSEW)
            i+=1


    def clear_button(self):
        clear_button = tk.Button(self.button_frame, text='C', bg=off_white, fg=lable_colore,
         font=default_font_style, borderwidth=0,command=lambda :self.clear_button_operation())
        clear_button.grid(row=0, column=1,columnspan=3,sticky=tk.NSEW)

    def clear_button_operation(self):
        self.current_expression=''
        self.total_expression=''
        self.update_label()
        self.update_total_label()

    def equal_button(self):

        equal_button = tk.Button(self.button_frame, text='=', bg=light_blue, fg=lable_colore,
                font=default_font_style, borderwidth=0,command=lambda :self.equal_button_operation())
        equal_button.grid(row=4, column=3,columnspan=2,sticky=tk.NSEW)


    def equal_button_operation(self):
        try:
            self.total_expression+=self.current_expression
            self.update_total_label()
            self.current_expression=str(eval(self.total_expression))
            self.total_expression=''
            self.update_label()
        except:
            self.lable.config(text='Error')


    def update_total_label(self):
        self.total_lable.config(text=self.total_expression)
    def update_label(self):
        self.lable.config(text=self.current_expression)













    def run(self):
        self.window.mainloop()
if  __name__=='__main__':
    calc=Calculator()
    calc.run()

